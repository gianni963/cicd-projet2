name: CI/CD workflow dd
on: push
env:
  SERVER_PRODUCTION_IP: "64.225.82.49"
  SERVER_PRODUCTION_USER: root

jobs:
  tests-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: install node
        uses: actions/setup-node@v3
        with:
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json
      - name: install dependencies
        run: npm ci --prefeer-offline
      - name: run linter
        run: npm run lint
      - name: npm audit
        run: npm audit || true

  tests-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./node-api
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: install node
        uses: actions/setup-node@v3
        with:
          cache: 'npm'
          cache-dependency-path: ./node-api/package-lock.json
      - name: install dependencies
        run: npm ci --prefeer-offline
      - name: run linter
        run: npm run lint
      - name: npm audit
        run: npm audit || true
      - name: exec unit tests
        run: npm run test:ci
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: gianni963/cicd-projet2
            
  build-frontend-and-node-api:
    needs: [tests-frontend, tests-backend]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
        - context_name: ./frontend
          image_name: ghcr.io/gianni963/cicd-projet2/frontend:latest
        - context_name: ./node-api
          image_name: ghcr.io/gianni963/cicd-projet2/node-api:latest
    permissions:
      packages: write
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: setup docker buildx
        uses: docker/setup-buildx-action@v3
      - name: docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image_name }}
      - name: login to github contaner registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context_name }}
          push: true
          tags: ${{ matrix.image_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  #e2e:
   # needs: [build-frontend-and-node-api]
   # runs-on: ubuntu-latest
   # steps:
    #  - name: checkout
     #   uses: actions/checkout@v4
     # - name: login to github contaner registry
     #   uses: docker/login-action@v3
      #  with:
      #    registry: ghcr.io
      #    username: ${{ github.actor }}
      #    password: ${{ secrets.GITHUB_TOKEN }}
      #- name: lancement des tests E2E2
      #  run: |
      #    docker compose up --exit-code-from cypress --abort-on-container-exit
      #- name: clean
      #  run: |
      #    docker compose down -v --remove-orphans

  deploy-production:
    needs: build-frontend-and-node-api
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: http:/SERVER_PRODUCTION_IP
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: deployer sur le server de production
        run: |
          eval $(ssh-agent -s)
          ssh-add - <<< "${{ secrets.VPS_KEY }}"
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.SERVER_PRODUCTION_IP }} >> ~/.ssh/known_hosts
          scp docker-compose.production.yml ${{ env.SERVER_PRODUCTION_USER}}@${{ env.SERVER_PRODUCTION_IP }}: /root/docker-compose.production.yml
          ssh ${{ env.SERVER_PRODUCTION_USER}}@${{ env.SERVER_PRODUCTION_IP }} "docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN}}"
          ssh ${{ env.SERVER_PRODUCTION_USER}}@${{ env.SERVER_PRODUCTION_IP }} "docker compose -f /root/docker-compose.production.yml up -d --force-recreate"



 